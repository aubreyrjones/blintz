
/**
  Create a String with members:
    @buffer
    size
    @lookahead_buffer
    simple
    
    Buffer and size may be initialized by the allocator.
*/

struct String(@buffer, size){
  var 4 @lookahead_buffer;
  var simple;
}

/**
  Methods defined on the String struct.
*/
filter String {
  def init(){
    //conventional runtime-initialization call.
  }
  
  def initFromArray(@char_array, size){
    var i;
    
    if (size > @[:size]){
      return false;
    }
    
    i = 0;
    while (i < size){
      @[:buffer][i] = @char_array[i];
    } next {
      i = i + 1;
    }
    
    return true;
  }
}

/**
  Filters don't have to be tied to a struct
*/
filter StatelessDisplayDriver {
  def init(hardwareId){
    //initialize the hardware
  }
  
  def dispose(){
    // uninitialize the hardware 
  }
  
  def writeTo(row, column, character){
    @[(row * width) + column] = character;
  }
}


def main(){
  var a;              //one-word local variable
  var 32 @array;      //32-word local array
  var array_p;     //a raw reference

  a = @array; //raw array reference yields address as a number
  a = 6; //you overwrote your detyped pointer, oops
  [a] = 6; //yeah, that'll work.
  
  var String(@array, 32) @string;        //allocates a String on the stack, c'tor filled in as requested
  
  @string[:init("Hello there.")];
  
}





def as_params(@string as String, @unfiltered_array, n){
  @string[:init("Hello yourself")];
  @string[:set(n, "pff")];

  filter @second_string at @unfiltered_array as String;            //allocates nothing, but @unfiltered_array is now filtered as a String
  
  @second_string[:init("This ain't bad.")];                  //modifies the contents of @unfiltered_array as if it's a String
}





def manual_location(){
  var String(0x8000, 398) @string; // creates a struct in this stack frame, but with address as c'tor arg
  
  filter @manual_buffer at @string[:buffer] + MENU_LINE_OFFSET; // Create an array reference to a specific location
  
  var String(@manual_buffer, 32) @substring; // A crude IO system, based on substrings?
  
  @substring[:initFromArray("Testing?")];
  
  filter @end_string at _end as String; // Filter an arbitrary memory address as an arbitrary Struct.
                                        // Note that we're not talking about the @end_string[:buffer]
                                        // reference. We're talking about the backing memory of the 
                                        // struct specifically.
}







