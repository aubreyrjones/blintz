# Autogenerated from a Treetop grammar. Edits may be lost.


module Blintz
  include Treetop::Runtime

  def root
    @root ||= :blintz_module
  end

  def _nt_blintz_module
    start_index = index
    if node_cache[:blintz_module].has_key?(index)
      cached = node_cache[:blintz_module][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_blintz_module_statement
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:blintz_module][start_index] = r0

    r0
  end

  module BlintzModuleStatement0
    def _s_1
      elements[0]
    end

    def top_level_statement
      elements[1]
    end

    def _s_2
      elements[2]
    end
  end

  def _nt_blintz_module_statement
    start_index = index
    if node_cache[:blintz_module_statement].has_key?(index)
      cached = node_cache[:blintz_module_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt__s_
    s0 << r1
    if r1
      r2 = _nt_top_level_statement
      s0 << r2
      if r2
        r3 = _nt__s_
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(BlintzModuleStatement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:blintz_module_statement][start_index] = r0

    r0
  end

  def _nt_top_level_statement
    start_index = index
    if node_cache[:top_level_statement].has_key?(index)
      cached = node_cache[:top_level_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_function_def
    if r1
      r0 = r1
    else
      r2 = _nt_import_statement
      if r2
        r0 = r2
      else
        r3 = _nt_struct_def
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:top_level_statement][start_index] = r0

    r0
  end

  module ImportStatement0
    def _import
      elements[0]
    end

    def _s_1
      elements[1]
    end

    def string_literal
      elements[2]
    end

    def _s_2
      elements[3]
    end

  end

  def _nt_import_statement
    start_index = index
    if node_cache[:import_statement].has_key?(index)
      cached = node_cache[:import_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt__import
    s0 << r1
    if r1
      r2 = _nt__s_
      s0 << r2
      if r2
        r3 = _nt_string_literal
        s0 << r3
        if r3
          r4 = _nt__s_
          s0 << r4
          if r4
            if has_terminal?(';', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(';')
              r5 = nil
            end
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ImportStatement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:import_statement][start_index] = r0

    r0
  end

  module FunctionDef0
    def _def
      elements[0]
    end

    def _s_1
      elements[1]
    end

    def identifier
      elements[2]
    end

    def _s_2
      elements[3]
    end

    def parameter_list
      elements[4]
    end

    def _s_3
      elements[5]
    end

    def statement
      elements[6]
    end
  end

  def _nt_function_def
    start_index = index
    if node_cache[:function_def].has_key?(index)
      cached = node_cache[:function_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt__def
    s0 << r1
    if r1
      r2 = _nt__s_
      s0 << r2
      if r2
        r3 = _nt_identifier
        s0 << r3
        if r3
          r4 = _nt__s_
          s0 << r4
          if r4
            r5 = _nt_parameter_list
            s0 << r5
            if r5
              r6 = _nt__s_
              s0 << r6
              if r6
                r7 = _nt_statement
                s0 << r7
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FunctionDef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function_def][start_index] = r0

    r0
  end

  module StructDef0
    def _struct
      elements[0]
    end

    def _s_1
      elements[1]
    end

    def struct_type
      elements[2]
    end

    def _s_2
      elements[3]
    end

    def struct_body_definition
      elements[4]
    end
  end

  def _nt_struct_def
    start_index = index
    if node_cache[:struct_def].has_key?(index)
      cached = node_cache[:struct_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt__struct
    s0 << r1
    if r1
      r2 = _nt__s_
      s0 << r2
      if r2
        r3 = _nt_struct_type
        s0 << r3
        if r3
          r4 = _nt__s_
          s0 << r4
          if r4
            r5 = _nt_struct_body_definition
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StructDef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:struct_def][start_index] = r0

    r0
  end

  module StructBodyDefinition0
    def _s_1
      elements[0]
    end

    def struct_body_statement
      elements[1]
    end

    def _s_2
      elements[2]
    end
  end

  module StructBodyDefinition1
  end

  def _nt_struct_body_definition
    start_index = index
    if node_cache[:struct_body_definition].has_key?(index)
      cached = node_cache[:struct_body_definition][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('{', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('{')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt__s_
        s3 << r4
        if r4
          r5 = _nt_struct_body_statement
          s3 << r5
          if r5
            r6 = _nt__s_
            s3 << r6
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(StructBodyDefinition0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if has_terminal?('}', false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('}')
          r7 = nil
        end
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StructBodyDefinition1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:struct_body_definition][start_index] = r0

    r0
  end

  def _nt_struct_body_statement
    start_index = index
    if node_cache[:struct_body_statement].has_key?(index)
      cached = node_cache[:struct_body_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_var_declaration_statement
    if r1
      r0 = r1
    else
      r2 = _nt_function_def
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:struct_body_statement][start_index] = r0

    r0
  end

  def _nt_statement
    start_index = index
    if node_cache[:statement].has_key?(index)
      cached = node_cache[:statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_compound_statement
    if r1
      r0 = r1
    else
      r2 = _nt_simple_statement
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:statement][start_index] = r0

    r0
  end

  module SimpleStatement0
    def _s_
      elements[1]
    end

  end

  def _nt_simple_statement
    start_index = index
    if node_cache[:simple_statement].has_key?(index)
      cached = node_cache[:simple_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_expression_statement
    if r2
      r1 = r2
    else
      r3 = _nt_assignment_statement
      if r3
        r1 = r3
      else
        r4 = _nt_var_declaration_statement
        if r4
          r1 = r4
        else
          r5 = _nt_if_statement
          if r5
            r1 = r5
          else
            r6 = _nt_while_statement
            if r6
              r1 = r6
            else
              r7 = _nt_return_statement
              if r7
                r1 = r7
              else
                @index = i1
                r1 = nil
              end
            end
          end
        end
      end
    end
    s0 << r1
    if r1
      r8 = _nt__s_
      s0 << r8
      if r8
        if has_terminal?(';', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(';')
          r9 = nil
        end
        s0 << r9
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SimpleStatement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:simple_statement][start_index] = r0

    r0
  end

  module CompoundStatement0
    def _s_1
      elements[0]
    end

    def simple_statement
      elements[1]
    end

    def _s_2
      elements[2]
    end
  end

  module CompoundStatement1
  end

  def _nt_compound_statement
    start_index = index
    if node_cache[:compound_statement].has_key?(index)
      cached = node_cache[:compound_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('{', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('{')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt__s_
        s3 << r4
        if r4
          r5 = _nt_simple_statement
          s3 << r5
          if r5
            r6 = _nt__s_
            s3 << r6
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(CompoundStatement0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?('}', false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('}')
          r7 = nil
        end
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CompoundStatement1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:compound_statement][start_index] = r0

    r0
  end

  def _nt_expression_statement
    start_index = index
    if node_cache[:expression_statement].has_key?(index)
      cached = node_cache[:expression_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_expression

    node_cache[:expression_statement][start_index] = r0

    r0
  end

  module ReturnStatement0
    def _return
      elements[0]
    end

    def _s_
      elements[1]
    end

  end

  def _nt_return_statement
    start_index = index
    if node_cache[:return_statement].has_key?(index)
      cached = node_cache[:return_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt__return
    s0 << r1
    if r1
      r2 = _nt__s_
      s0 << r2
      if r2
        r4 = _nt_expression
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ReturnStatement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:return_statement][start_index] = r0

    r0
  end

  module AssignmentStatement0
    def identifier
      elements[0]
    end

    def _s_1
      elements[1]
    end

    def _s_2
      elements[3]
    end

    def expression
      elements[4]
    end
  end

  def _nt_assignment_statement
    start_index = index
    if node_cache[:assignment_statement].has_key?(index)
      cached = node_cache[:assignment_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_identifier
    s0 << r1
    if r1
      r2 = _nt__s_
      s0 << r2
      if r2
        if has_terminal?('=', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('=')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt__s_
          s0 << r4
          if r4
            r5 = _nt_expression
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(AssignmentStatement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:assignment_statement][start_index] = r0

    r0
  end

  def _nt_variable_declaration
    start_index = index
    if node_cache[:variable_declaration].has_key?(index)
      cached = node_cache[:variable_declaration][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_simple_decl

    node_cache[:variable_declaration][start_index] = r0

    r0
  end

  def _nt_simple_decl
    start_index = index
    if node_cache[:simple_decl].has_key?(index)
      cached = node_cache[:simple_decl][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_struct_decl
    if r1
      r0 = r1
    else
      r2 = _nt_word_decl
      if r2
        r0 = r2
      else
        r3 = _nt_array_decl
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:simple_decl][start_index] = r0

    r0
  end

  module StructDecl0
    def _var
      elements[0]
    end

    def _s_1
      elements[1]
    end

    def type_name
      elements[2]
    end

    def _s_2
      elements[4]
    end

    def identifier
      elements[5]
    end
  end

  def _nt_struct_decl
    start_index = index
    if node_cache[:struct_decl].has_key?(index)
      cached = node_cache[:struct_decl][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt__var
    s0 << r1
    if r1
      r2 = _nt__s_
      s0 << r2
      if r2
        r3 = _nt_type_name
        s0 << r3
        if r3
          i4 = index
          r5 = _nt_parameter_list
          if r5
            r4 = r5
          else
            if has_terminal?('', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 0))
              @index += 0
            else
              terminal_parse_failure('')
              r6 = nil
            end
            if r6
              r4 = r6
            else
              @index = i4
              r4 = nil
            end
          end
          s0 << r4
          if r4
            r7 = _nt__s_
            s0 << r7
            if r7
              r8 = _nt_identifier
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StructDecl0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:struct_decl][start_index] = r0

    r0
  end

  module WordDecl0
    def _var
      elements[0]
    end

    def _s_
      elements[1]
    end

    def identifier
      elements[2]
    end
  end

  def _nt_word_decl
    start_index = index
    if node_cache[:word_decl].has_key?(index)
      cached = node_cache[:word_decl][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt__var
    s0 << r1
    if r1
      r2 = _nt__s_
      s0 << r2
      if r2
        r3 = _nt_identifier
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(WordDecl0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:word_decl][start_index] = r0

    r0
  end

  module ArrayDecl0
    def _var
      elements[0]
    end

    def _s_1
      elements[1]
    end

    def expression
      elements[2]
    end

    def _s_2
      elements[3]
    end

    def identifier
      elements[4]
    end
  end

  def _nt_array_decl
    start_index = index
    if node_cache[:array_decl].has_key?(index)
      cached = node_cache[:array_decl][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt__var
    s0 << r1
    if r1
      r2 = _nt__s_
      s0 << r2
      if r2
        r3 = _nt_expression
        s0 << r3
        if r3
          r4 = _nt__s_
          s0 << r4
          if r4
            r5 = _nt_identifier
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ArrayDecl0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:array_decl][start_index] = r0

    r0
  end

  module IfStatement0
    def _s_
      elements[0]
    end

    def elsif_statement
      elements[1]
    end
  end

  module IfStatement1
    def _if
      elements[0]
    end

    def _s_1
      elements[1]
    end

    def _s_2
      elements[3]
    end

    def expression
      elements[4]
    end

    def _s_3
      elements[5]
    end

    def _s_4
      elements[7]
    end

    def statement
      elements[8]
    end

    def _s_5
      elements[10]
    end

  end

  def _nt_if_statement
    start_index = index
    if node_cache[:if_statement].has_key?(index)
      cached = node_cache[:if_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt__if
    s0 << r1
    if r1
      r2 = _nt__s_
      s0 << r2
      if r2
        if has_terminal?('(', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt__s_
          s0 << r4
          if r4
            r5 = _nt_expression
            s0 << r5
            if r5
              r6 = _nt__s_
              s0 << r6
              if r6
                if has_terminal?(')', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r7 = nil
                end
                s0 << r7
                if r7
                  r8 = _nt__s_
                  s0 << r8
                  if r8
                    r9 = _nt_statement
                    s0 << r9
                    if r9
                      s10, i10 = [], index
                      loop do
                        i11, s11 = index, []
                        r12 = _nt__s_
                        s11 << r12
                        if r12
                          r13 = _nt_elsif_statement
                          s11 << r13
                        end
                        if s11.last
                          r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                          r11.extend(IfStatement0)
                        else
                          @index = i11
                          r11 = nil
                        end
                        if r11
                          s10 << r11
                        else
                          break
                        end
                      end
                      r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                      s0 << r10
                      if r10
                        r14 = _nt__s_
                        s0 << r14
                        if r14
                          r16 = _nt_else_statement
                          if r16
                            r15 = r16
                          else
                            r15 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s0 << r15
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(IfStatement1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:if_statement][start_index] = r0

    r0
  end

  module ElseStatement0
    def _else
      elements[0]
    end

    def _s_
      elements[1]
    end

    def statement
      elements[2]
    end
  end

  def _nt_else_statement
    start_index = index
    if node_cache[:else_statement].has_key?(index)
      cached = node_cache[:else_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt__else
    s0 << r1
    if r1
      r2 = _nt__s_
      s0 << r2
      if r2
        r3 = _nt_statement
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ElseStatement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:else_statement][start_index] = r0

    r0
  end

  module ElsifStatement0
    def _elsif
      elements[0]
    end

    def _s_1
      elements[1]
    end

    def _s_2
      elements[3]
    end

    def expression
      elements[4]
    end

    def _s_3
      elements[5]
    end

    def _s_4
      elements[7]
    end

    def statement
      elements[8]
    end
  end

  def _nt_elsif_statement
    start_index = index
    if node_cache[:elsif_statement].has_key?(index)
      cached = node_cache[:elsif_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt__elsif
    s0 << r1
    if r1
      r2 = _nt__s_
      s0 << r2
      if r2
        if has_terminal?('(', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt__s_
          s0 << r4
          if r4
            r5 = _nt_expression
            s0 << r5
            if r5
              r6 = _nt__s_
              s0 << r6
              if r6
                if has_terminal?(')', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r7 = nil
                end
                s0 << r7
                if r7
                  r8 = _nt__s_
                  s0 << r8
                  if r8
                    r9 = _nt_statement
                    s0 << r9
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ElsifStatement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:elsif_statement][start_index] = r0

    r0
  end

  module WhileStatement0
    def _while
      elements[0]
    end

    def _s_1
      elements[1]
    end

    def _s_2
      elements[3]
    end

    def expression
      elements[4]
    end

    def _s_3
      elements[5]
    end

    def _s_4
      elements[7]
    end

    def statement
      elements[8]
    end

  end

  def _nt_while_statement
    start_index = index
    if node_cache[:while_statement].has_key?(index)
      cached = node_cache[:while_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt__while
    s0 << r1
    if r1
      r2 = _nt__s_
      s0 << r2
      if r2
        if has_terminal?('(', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt__s_
          s0 << r4
          if r4
            r5 = _nt_expression
            s0 << r5
            if r5
              r6 = _nt__s_
              s0 << r6
              if r6
                if has_terminal?(')', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r7 = nil
                end
                s0 << r7
                if r7
                  r8 = _nt__s_
                  s0 << r8
                  if r8
                    r9 = _nt_statement
                    s0 << r9
                    if r9
                      r11 = _nt_next_statement
                      if r11
                        r10 = r11
                      else
                        r10 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s0 << r10
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(WhileStatement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:while_statement][start_index] = r0

    r0
  end

  module NextStatement0
    def _next
      elements[0]
    end

    def _s_
      elements[1]
    end

    def statement
      elements[2]
    end
  end

  def _nt_next_statement
    start_index = index
    if node_cache[:next_statement].has_key?(index)
      cached = node_cache[:next_statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt__next
    s0 << r1
    if r1
      r2 = _nt__s_
      s0 << r2
      if r2
        r3 = _nt_statement
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NextStatement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:next_statement][start_index] = r0

    r0
  end

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_numeric_literal

    node_cache[:expression][start_index] = r0

    r0
  end

  module ParameterList0
    def _s_1
      elements[1]
    end

    def _s_2
      elements[3]
    end

  end

  def _nt_parameter_list
    start_index = index
    if node_cache[:parameter_list].has_key?(index)
      cached = node_cache[:parameter_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('(', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt__s_
      s0 << r2
      if r2
        i3 = index
        r4 = _nt_parameter_list
        if r4
          r3 = r4
        else
          if has_terminal?('', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 0))
            @index += 0
          else
            terminal_parse_failure('')
            r5 = nil
          end
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        s0 << r3
        if r3
          r6 = _nt__s_
          s0 << r6
          if r6
            if has_terminal?(')', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(')')
              r7 = nil
            end
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ParameterList0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:parameter_list][start_index] = r0

    r0
  end

  module ParameterList0
    def additional_param
      elements[0]
    end

    def _s_
      elements[1]
    end
  end

  module ParameterList1
    def identifier
      elements[0]
    end

    def _s_
      elements[1]
    end

  end

  def _nt_parameter_list
    start_index = index
    if node_cache[:parameter_list].has_key?(index)
      cached = node_cache[:parameter_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_identifier
    s0 << r1
    if r1
      r2 = _nt__s_
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          i4, s4 = index, []
          r5 = _nt_additional_param
          s4 << r5
          if r5
            r6 = _nt__s_
            s4 << r6
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(ParameterList0)
          else
            @index = i4
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ParameterList1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:parameter_list][start_index] = r0

    r0
  end

  module AdditionalParam0
    def _s_
      elements[1]
    end

    def identifier
      elements[2]
    end
  end

  def _nt_additional_param
    start_index = index
    if node_cache[:additional_param].has_key?(index)
      cached = node_cache[:additional_param][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(',', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(',')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt__s_
      s0 << r2
      if r2
        r3 = _nt_identifier
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(AdditionalParam0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:additional_param][start_index] = r0

    r0
  end

  module _import0
  end

  def _nt__import
    start_index = index
    if node_cache[:_import].has_key?(index)
      cached = node_cache[:_import][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('import', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('import')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('IMPORT', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('IMPORT')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i4 = index
      r5 = _nt_keyword_term
      if r5
        r4 = nil
      else
        @index = i4
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(_import0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:_import][start_index] = r0

    r0
  end

  module _def0
  end

  def _nt__def
    start_index = index
    if node_cache[:_def].has_key?(index)
      cached = node_cache[:_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('def', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('def')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('DEF', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('DEF')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i4 = index
      r5 = _nt_keyword_term
      if r5
        r4 = nil
      else
        @index = i4
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(_def0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:_def][start_index] = r0

    r0
  end

  module _struct0
  end

  def _nt__struct
    start_index = index
    if node_cache[:_struct].has_key?(index)
      cached = node_cache[:_struct][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('struct', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('struct')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('STRUCT', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('STRUCT')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i4 = index
      r5 = _nt_keyword_term
      if r5
        r4 = nil
      else
        @index = i4
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(_struct0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:_struct][start_index] = r0

    r0
  end

  module _filter0
  end

  def _nt__filter
    start_index = index
    if node_cache[:_filter].has_key?(index)
      cached = node_cache[:_filter][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('filter', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('filter')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('FILTER', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('FILTER')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i4 = index
      r5 = _nt_keyword_term
      if r5
        r4 = nil
      else
        @index = i4
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(_filter0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:_filter][start_index] = r0

    r0
  end

  module _as0
  end

  def _nt__as
    start_index = index
    if node_cache[:_as].has_key?(index)
      cached = node_cache[:_as][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('as', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('as')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('AS', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('AS')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i4 = index
      r5 = _nt_keyword_term
      if r5
        r4 = nil
      else
        @index = i4
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(_as0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:_as][start_index] = r0

    r0
  end

  module _while0
  end

  def _nt__while
    start_index = index
    if node_cache[:_while].has_key?(index)
      cached = node_cache[:_while][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('while', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('while')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('WHILE', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('WHILE')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i4 = index
      r5 = _nt_keyword_term
      if r5
        r4 = nil
      else
        @index = i4
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(_while0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:_while][start_index] = r0

    r0
  end

  module _next0
  end

  def _nt__next
    start_index = index
    if node_cache[:_next].has_key?(index)
      cached = node_cache[:_next][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('next', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('next')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('NEXT', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('NEXT')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i4 = index
      r5 = _nt_keyword_term
      if r5
        r4 = nil
      else
        @index = i4
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(_next0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:_next][start_index] = r0

    r0
  end

  module _if0
  end

  def _nt__if
    start_index = index
    if node_cache[:_if].has_key?(index)
      cached = node_cache[:_if][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('if', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('if')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('IF', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('IF')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i4 = index
      r5 = _nt_keyword_term
      if r5
        r4 = nil
      else
        @index = i4
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(_if0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:_if][start_index] = r0

    r0
  end

  module _elsif0
  end

  def _nt__elsif
    start_index = index
    if node_cache[:_elsif].has_key?(index)
      cached = node_cache[:_elsif][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('elsif', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('elsif')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('ELSIF', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('ELSIF')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i4 = index
      r5 = _nt_keyword_term
      if r5
        r4 = nil
      else
        @index = i4
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(_elsif0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:_elsif][start_index] = r0

    r0
  end

  module _else0
  end

  def _nt__else
    start_index = index
    if node_cache[:_else].has_key?(index)
      cached = node_cache[:_else][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('else', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('else')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('ELSE', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('ELSE')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i4 = index
      r5 = _nt_keyword_term
      if r5
        r4 = nil
      else
        @index = i4
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(_else0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:_else][start_index] = r0

    r0
  end

  module _return0
  end

  def _nt__return
    start_index = index
    if node_cache[:_return].has_key?(index)
      cached = node_cache[:_return][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('return', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('return')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('RETURN', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('RETURN')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i4 = index
      r5 = _nt_keyword_term
      if r5
        r4 = nil
      else
        @index = i4
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(_return0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:_return][start_index] = r0

    r0
  end

  module _var0
  end

  def _nt__var
    start_index = index
    if node_cache[:_var].has_key?(index)
      cached = node_cache[:_var][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('var', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('var')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('VAR', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('VAR')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i4 = index
      r5 = _nt_keyword_term
      if r5
        r4 = nil
      else
        @index = i4
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(_var0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:_var][start_index] = r0

    r0
  end

  module KeywordTerm0
  end

  def _nt_keyword_term
    start_index = index
    if node_cache[:keyword_term].has_key?(index)
      cached = node_cache[:keyword_term][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('\G[ \\t\\n]', true, index)
      r2 = true
      @index += 1
    else
      r2 = nil
    end
    if r2
      r1 = nil
    else
      @index = i1
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if index < input_length
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("any character")
        r3 = nil
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(KeywordTerm0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:keyword_term][start_index] = r0

    r0
  end

  module TypeName0
  end

  def _nt_type_name
    start_index = index
    if node_cache[:type_name].has_key?(index)
      cached = node_cache[:type_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?('\G[A-Z\\._]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        if has_terminal?('\G[a-zA-Z\\._0-9]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TypeName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:type_name][start_index] = r0

    r0
  end

  module Identifier0
  end

  def _nt_identifier
    start_index = index
    if node_cache[:identifier].has_key?(index)
      cached = node_cache[:identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('@', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('@')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        if has_terminal?('\G[a-z\\._]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s0 << r3
      if r3
        s5, i5 = [], index
        loop do
          if has_terminal?('\G[a-zA-Z\\._0-9]', true, index)
            r6 = true
            @index += 1
          else
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Identifier0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:identifier][start_index] = r0

    r0
  end

  def _nt__s_
    start_index = index
    if node_cache[:_s_].has_key?(index)
      cached = node_cache[:_s_][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_space
      if r2
        r1 = r2
      else
        r3 = _nt_comment
        if r3
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:_s_][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[ \\t\\n]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:space][start_index] = r0

    r0
  end

  module Comment0
  end

  module Comment1
  end

  module Comment2
  end

  module Comment3
  end

  def _nt_comment
    start_index = index
    if node_cache[:comment].has_key?(index)
      cached = node_cache[:comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('/*', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('/*')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        i5 = index
        if has_terminal?('*/', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('*/')
          r6 = nil
        end
        if r6
          r5 = nil
        else
          @index = i5
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if index < input_length
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r7 = nil
          end
          s4 << r7
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(Comment0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
      if r3
        if has_terminal?('*/', false, index)
          r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('*/')
          r8 = nil
        end
        s1 << r8
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Comment1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i9, s9 = index, []
      if has_terminal?('//', false, index)
        r10 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('//')
        r10 = nil
      end
      s9 << r10
      if r10
        i11, s11 = index, []
        i12 = index
        if has_terminal?("\n", false, index)
          r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r13 = nil
        end
        if r13
          r12 = nil
        else
          @index = i12
          r12 = instantiate_node(SyntaxNode,input, index...index)
        end
        s11 << r12
        if r12
          if index < input_length
            r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r14 = nil
          end
          s11 << r14
        end
        if s11.last
          r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
          r11.extend(Comment2)
        else
          @index = i11
          r11 = nil
        end
        s9 << r11
        if r11
          if has_terminal?("\n", false, index)
            r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\n")
            r15 = nil
          end
          s9 << r15
        end
      end
      if s9.last
        r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        r9.extend(Comment3)
      else
        @index = i9
        r9 = nil
      end
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:comment][start_index] = r0

    r0
  end

  module StringLiteral0
  end

  module StringLiteral1
  end

  module StringLiteral2
			def value
				elements[1].text_value[1..-2]
			end
  end

  def _nt_string_literal
    start_index = index
    if node_cache[:string_literal].has_key?(index)
      cached = node_cache[:string_literal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('"', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('"')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        if has_terminal?('\"', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('\"')
          r4 = nil
        end
        if r4
          r3 = r4
        else
          i5, s5 = index, []
          i6 = index
          if has_terminal?('"', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('"')
            r7 = nil
          end
          if r7
            r6 = nil
          else
            @index = i6
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s5 << r6
          if r6
            if index < input_length
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("any character")
              r8 = nil
            end
            s5 << r8
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(StringLiteral0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?('"', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r9 = nil
        end
        s0 << r9
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StringLiteral1)
      r0.extend(StringLiteral2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:string_literal][start_index] = r0

    r0
  end

  module NumericLiteral0
  end

  module NumericLiteral1
			def content
				sign = 1
				if text_value.start_with? '-'
					sign = -1
				end
				{:type => :numeric_literal, :token => text_value, :value => elements[1].value * sign}
			end
  end

  def _nt_numeric_literal
    start_index = index
    if node_cache[:numeric_literal].has_key?(index)
      cached = node_cache[:numeric_literal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('-', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('-')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      i3 = index
      r4 = _nt_hex
      if r4
        r3 = r4
      else
        r5 = _nt_decimal
        if r5
          r3 = r5
        else
          @index = i3
          r3 = nil
        end
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NumericLiteral0)
      r0.extend(NumericLiteral1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:numeric_literal][start_index] = r0

    r0
  end

  module Decimal0
			def value
				text_value.to_i(10)
			end
  end

  def _nt_decimal
    start_index = index
    if node_cache[:decimal].has_key?(index)
      cached = node_cache[:decimal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Decimal0)
    end

    node_cache[:decimal][start_index] = r0

    r0
  end

  module Hex0
  end

  module Hex1
			def value
				text_value[2..-1].to_i(16)
			end
  end

  def _nt_hex
    start_index = index
    if node_cache[:hex].has_key?(index)
      cached = node_cache[:hex][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('0x', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('0x')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[0-9a-fA-F]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Hex0)
      r0.extend(Hex1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:hex][start_index] = r0

    r0
  end

end

class BlintzParser < Treetop::Runtime::CompiledParser
  include Blintz
end

